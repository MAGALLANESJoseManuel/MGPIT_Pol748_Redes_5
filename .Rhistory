library(dplyr)
variables %>%
group_by(Region) %>%
summarise_at(vars(Prop_no_Comp), list(Prop_no_Comp=sum)) ->variablesByRegion
variablesByRegion
View(usaMap)
head(usaMap)
usaMap$STATE==variables$State
usaMap$STATE
usaMap$NAME
usaMap$NAME==variables$State
usaMap$NAME
variables$State
sort(usaMap$NAME)==variables$State
sort(variables$State)
sort(usaMap$NAME)==sort(variables$State)
merge(usaMap,variables, by.x='NAME', by.y='State')
usaMap=merge(usaMap,variables, by.x='NAME', by.y='State')
usaMap
aggregate(usaMap, Region~Prop_no_Comp,sum)
aggregate(data=usaMap, by=Region~Prop_no_Comp,sum)
aggregate(data=usaMap, by=Region~Prop_no_Comp,mean)
library(dplyr)
usaMap %>%
group_by(Region) %>%
summarise_at(vars(Prop_no_Comp), list(Prop_no_Comp=sum)) ->variablesByRegion
variablesByRegion
plot(variablesByRegion)
ggplot(variablesByRegion) + geom_sf()
library(dplyr)
usaMap %>%
group_by(Region) %>%
summarise_at(vars(Prop_no_Comp), list(Prop_no_Comp_sum=sum)) ->variablesByRegion
ggplot(variablesByRegion) + geom_sf(aes(fill=Prop_no_Comp_sum))
library(dplyr)
usaMap %>%
group_by(Region) %>%
summarise_at(vars(Prop_no_Comp), list(Prop_no_Comp_sum=sum)) ->variablesByRegion
ggplot(variablesByRegion) + geom_sf(aes(fill=Prop_no_Comp_sum)) +coord_sf(crs = st_crs(2163))
library(dplyr)
usaMap %>%
group_by(Region) %>%
summarise_at(vars(Prop_no_Comp), list(Prop_no_Comp_sum=sum)) ->variablesByRegion
#newMap
variablesByRegion
library(dplyr)
usaMap %>%
group_by(Region) %>%
summarise_at(vars(Prop_no_Comp), list(Prop_no_Comp_mean=mean)) ->variablesByRegion
#newMap
variablesByRegion
ggplot(variablesByRegion) + geom_sf(aes(fill=Prop_no_Comp_mean)) +coord_sf(crs = st_crs(2163))
View(variablesByRegion)
bookdown:::serve_book()
if (FALSE) {
library(rmarkdown)
if (pandoc_available())
cat("pandoc", as.character(pandoc_version()), "is available!\n")
if (pandoc_available("1.12.3"))
cat("required version of pandoc is available!\n")
}
if (FALSE) {
library(rmarkdown)
if (pandoc_available())
cat("pandoc", as.character(pandoc_version()), "is available!\n")
if (pandoc_available("1.12.3"))
cat("required version of pandoc is available!\n")
}
devtools::install_github('rstudio/rmarkdown')
library(rmarkdown)
Sys.getenv("PATH")
sessionInfo()
R.home()
system("type R")
file.path(R.home("bin"), "R")
Sys.getenv('R_HOME')
1+1
Sys.getenv('R_HOME')
file.path(R.home("bin"), "R")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("scales")
exp1=read.csv("escenarios experiment_1-table.csv",skip=6)
names(exp1)
?rm
rm(list = ls())
exp1=read.csv("escenarios experiment_1-table.csv",skip=6)
names(exp1)
View(exp1)
library(ggplot2)
base=ggplot(data=exp1)
base + geom_point(aes(x=pasosmax,y=restoalimento))
base + geom_point(aes(x=angulomax,y=restoalimento))
summary(lm(restoalimento~pasosmax+angulomax))
summary(lm(restoalimento~pasosmax+angulomax,data=exp1))
link1="https://docs.google.com/spreadsheets/d/e/2PACX-1vQKpd9WjJp1BNaoSI8rSXidbOSBg_QLzya6hBpL9QaShGktm-AEfbOazyhTBZxD6iZmH6e9cq50i3pj/pub?gid=0&single=true&output=csv"
#leyendo data
dataFase1=read.csv(link1)
#creando grafo
library(igraph)
netFase1=graph.data.frame(dataFase1,directed=TRUE)
# graficando
plot.igraph(netFase1)
edge_density(netFase1)
centr_degree(netFase1)$centralization
link2="https://docs.google.com/spreadsheets/d/e/2PACX-1vQKpd9WjJp1BNaoSI8rSXidbOSBg_QLzya6hBpL9QaShGktm-AEfbOazyhTBZxD6iZmH6e9cq50i3pj/pub?gid=773867725&single=true&output=csv"
#leyendo data
dataFase2=read.csv(link2)
#creando grafo
library(igraph)
netFase2=graph.data.frame(dataFase2,directed=TRUE)
# graficando
plot.igraph(netFase2)
edge_density(netFase2)
centr_degree(netFase2)$centralization
link3="https://docs.google.com/spreadsheets/d/e/2PACX-1vQKpd9WjJp1BNaoSI8rSXidbOSBg_QLzya6hBpL9QaShGktm-AEfbOazyhTBZxD6iZmH6e9cq50i3pj/pub?gid=1305292430&single=true&output=csv"
#leyendo data
dataFase3=read.csv(link3)
#creando grafo
library(igraph)
netFase3=graph.data.frame(dataFase3,directed=TRUE)
# graficando
plot.igraph(netFase3)
netFase1
?centr_degree
?install.packages
install.packages("remotes")
remotes::install_github("rlesur/klippy")
plot(fc,topsNet_giant,layout = layout_with_fr)
library(readxl)
# link a GoogleDrive como un Excel
linkGoogle="https://docs.google.com/spreadsheets/d/e/2PACX-1vQaaNQb2frjnlt0fPSBQhp5tNydB0a9ibp98sblBn6OfvGd8vsx8cfHb4w8Cm_qC3EIeYFby_zNQBoK/pub?output=xlsx"
# leyendo archivo de red
adjacency=readxl::read_excel('data/seattleTop.xlsx',sheet = 'adjacency') # la tabla tiene este nombre
adjacency=as.data.frame(adjacency)
row.names(adjacency)=adjacency$name
adjacency$name=NULL
matrix <- as.matrix(adjacency)
library(igraph)
g <- graph_from_adjacency_matrix(matrix, mode="directed", weighted=NULL) # For directed networks
summary(g)
plot(g)
# leyendo archivo de red
attributes=readxl::read_excel('data/seattleTop.xlsx',sheet = 'attributes') # la tabla tiene este nombre
V(g)$male <- attributes$male
V(g)$popularity <- attributes$followers
is_connected(g,mode = c("strong"))
count_components(g, mode = c("strong"))
g_comp=components(g, mode = c("strong"))
g_comp
V(g)$membership=g_comp$membership
subset=V(g)[V(g)$membership==1]
topsNet_giant=induced_subgraph(g, subset)
topsNet_giant
edge_density(topsNet_giant)
reciprocity(topsNet_giant)
transitivity(topsNet_giant, type = "average")
topsNet_giant %>%
articulation_points() %>%
as.list() %>%
names() %>%
as.data.frame() %>%
`colnames<-`("Cut Points")
# let's see if we have communities here using the
# Grivan-Newman algorithm
# 1st we calculate the edge betweenness, merges, etc...
ebc <- cluster_edge_betweenness(topsNet_giant, directed=T)
modularity(ebc$membership)
fc=cluster_optimal(topsNet_giant)
# fc=cluster_optimal(topsNet_giant)
fc=cluster_louvain(as.undirected(topsNet_giant,mode="each"))
modularity(cluster_louvain(as.undirected(topsNet_giant,mode="each")))
communities(cluster_louvain(as.undirected(topsNet_giant,mode="each")))
plot(fc,topsNet_giant,layout = layout_with_fr)
plot(fc,topsNet_giant,layout = layout_with_fr,rescale=F)
plot(fc,topsNet_giant,layout = layout_with_fr,rescale=F,vertex.label='')
plot(fc,topsNet_giant,layout = layout_with_fr,rescale=F,vertex.label='')
plot(fc,topsNet_giant,layout = layout_with_fr,rescale=F,vertex.label='',arrow.size=0.2)
plot(fc,topsNet_giant,layout = layout_with_fr,rescale=F,vertex.label='',arrow.size=0.1)
plot(fc,topsNet_giant,layout = layout_with_fr,rescale=T,vertex.label='',arrow.size=0.1)
plot(fc,topsNet_giant,layout = layout_with_fr,rescale=T,vertex.label='',edge.arrow.size=.2)
l <- layout_with_fr(topsNet_giant)
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(fc,topsNet_giant,rescale=F, layout=l*2.0,vertex.label='',edge.arrow.size=.2)
l <- layout_with_fr(topsNet_giant)
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(fc,topsNet_giant,rescale=F, layout=l*1.0,vertex.label='',edge.arrow.size=.2)
l <- layout_with_fr(topsNet_giant)
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(fc,topsNet_giant,rescale=F, layout=l*1.0,vertex.label='',edge.arrow.size=.2,margin=-1)
l <- layout_with_fr(topsNet_giant)
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(fc,topsNet_giant,rescale=F, layout=l*1.0,vertex.label='',edge.arrow.size=.2,margin=-1.5)
l <- layout_with_fr(topsNet_giant)
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(fc,topsNet_giant,rescale=F, layout=l*1.0,vertex.label='',edge.arrow.size=.2,margin=1)
l <- layout_with_fr(topsNet_giant)
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(fc,topsNet_giant,rescale=F, layout=l*1.0,vertex.label='',edge.arrow.size=.2,margin=1.5)
l <- layout_with_fr(topsNet_giant)
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(fc,topsNet_giant,rescale=F, layout=l*1.0,vertex.label='',edge.arrow.size=.2,margin=2)
l <- layout_with_fr(topsNet_giant)
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(fc,topsNet_giant,rescale=F, layout=l*1.2,vertex.label='',edge.arrow.size=.2,margin=2)
l <- layout_with_fr(topsNet_giant)
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(fc,topsNet_giant,rescale=F, layout=l*1.2,vertex.label='',edge.arrow.size=.2,margin=-2)
l <- layout_with_fr(topsNet_giant)
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(fc,topsNet_giant,rescale=F, layout=l*1.2,vertex.label='',edge.arrow.size=.2,margin=-4)
l <- layout_with_fr(topsNet_giant)
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(fc,topsNet_giant,rescale=F, layout=l*2,vertex.label='',edge.arrow.size=.2,margin=-4)
l <- layout_with_fr(topsNet_giant)
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(fc,topsNet_giant,rescale=F, layout=l*2,vertex.label='',edge.arrow.size=.2,margin=4)
l <- layout_with_fr(topsNet_giant)
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(fc,topsNet_giant,rescale=F, layout=l*1,vertex.label='',edge.arrow.size=.2)
l <- layout_with_fr(topsNet_giant)
l <- norm_coords(l, ymin=-1, ymax=1, xmin=-1, xmax=1)
plot(fc,topsNet_giant,rescale=F, layout=l*1,vertex.label='',edge.arrow.size=.2)
l <- layout_with_fr(topsNet_giant)
plot(fc,topsNet_giant,rescale=T, layout=l,vertex.label='',edge.arrow.size=.2)
# l <- layout_with_fr(topsNet_giant)
l=layout_with_graphopt(topsNet_giant, charge=0.00000001)
plot(fc,topsNet_giant,rescale=T, layout=l,vertex.label='',edge.arrow.size=.2)
# l <- layout_with_fr(topsNet_giant)
l=layout_with_graphopt(topsNet_giant)#, charge=0.00000001)
plot(fc,topsNet_giant,rescale=T, layout=l,vertex.label='',edge.arrow.size=.2)
# l <- layout_with_fr(topsNet_giant)
l=layout_with_graphopt(topsNet_giant, charge=2)
plot(fc,topsNet_giant,rescale=T, layout=l,vertex.label='',edge.arrow.size=.2)
# l <- layout_with_fr(topsNet_giant)
l=layout_with_graphopt(topsNet_giant, charge=5)
plot(fc,topsNet_giant,rescale=T, layout=l,vertex.label='',edge.arrow.size=.2)
# l <- layout_with_fr(topsNet_giant)
l=layout_with_graphopt(topsNet_giant, charge=0.5)
plot(fc,topsNet_giant,rescale=T, layout=l,vertex.label='',edge.arrow.size=.2)
# l <- layout_with_fr(topsNet_giant)
l=layout_with_graphopt(topsNet_giant, charge=0.1)
plot(fc,topsNet_giant,rescale=T, layout=l,vertex.label='',edge.arrow.size=.2)
# l <- layout_with_fr(topsNet_giant)
l=layout_with_mds(topsNet_giant, charge=0.1)
# l <- layout_with_fr(topsNet_giant)
l=layout_with_mds(topsNet_giant)#, charge=0.1)
plot(fc,topsNet_giant,rescale=T, layout=l,vertex.label='',edge.arrow.size=.2)
# l <- layout_with_fr(topsNet_giant)
l=layout_with_graphopt(topsNet_giant, charge=0.1)
plot(fc,topsNet_giant,rescale=T, layout=l,vertex.label='',edge.arrow.size=.2)
# l <- layout_with_fr(topsNet_giant)
l=layout_with_kk(topsNet_giant)#, charge=0.1)
plot(fc,topsNet_giant,rescale=T, layout=l,vertex.label='',edge.arrow.size=.2)
?layout_with_kk
fc
# let's see if we have communities here using the
# Grivan-Newman algorithm
# 1st we calculate the edge betweenness, merges, etc...
ebc <- cluster_edge_betweenness(topsNet_giant, directed=T)
modularity(ebc$membership)
modularity(ebc)
communities(ebc)
adjacency=read.csv('data/seattleTop.csv',row.names = 1) # la tabla tiene este nombre
adjacency=read.csv('data/seattleTop_adjMx.csv',row.names = 1) # la tabla tiene este nombre
adjacency=as.data.frame(adjacency)
row.names(adjacency)=adjacency$name
adjacency$name=NULL
matrix <- as.matrix(adjacency)
library(igraph)
g <- graph_from_adjacency_matrix(matrix, mode="directed", weighted=NULL) # For directed networks
summary(g)
adjacency=read.csv('data/seattleTop_adjMx.csv',row.names = 1) # la tabla tiene este nombre
?rm
rm(list = ls())
adjacency=read.csv('data/seattleTop_adjMx.csv',row.names = 1) # la tabla tiene este nombre
matrix <- as.matrix(adjacency)
View(adjacency)
library(igraph)
topsNet <- graph_from_adjacency_matrix(matrix, mode="directed") # For directed networks
summary(topsNet)
V(topsNet)$male <- attributes$male
attributes$male
# limpiar memoria
rm(list = ls())
# abrir red
adjacency=read.csv('data/seattleTop_adjMx.csv',row.names = 1) # la tabla tiene este nombre
matrix <- as.matrix(adjacency)
# abrir atributos
attributes=read.csv('data/seattleTop_attrTbl.csv') # la tabla tiene este nombre
library(igraph)
topsNet <- graph_from_adjacency_matrix(matrix, mode="directed") # For directed networks
summary(topsNet)
V(topsNet)$male <- attributes$male
V(topsNet)$popularity <- attributes$followers
# ahora
summary(topsNet)
library(igraph)
topsNet <- graph_from_adjacency_matrix(matrix, mode="directed",weighted = 1) # For directed networks
summary(topsNet)
library(igraph)
topsNet <- graph_from_adjacency_matrix(matrix, mode="directed",weighted = '1') # For directed networks
summary(topsNet)
?graph_from_adjacency_matrix
View(matrix)
library(igraph)
topsNet <- graph_from_adjacency_matrix(matrix, mode="directed",weighted = 'weight')
summary(topsNet)
library(igraph)
topsNet <- graph_from_adjacency_matrix(matrix, mode="directed",weighted = TRUE)
summary(topsNet)
V(topsNet)$male <- attributes$male
V(topsNet)$popularity <- attributes$followers
# ahora
summary(topsNet)
is_connected(g,mode = c("strong"))
is_connected(topsNet,mode = c("strong"))
count_components(g, mode = c("strong"))
count_components(topsNet, mode = c("strong"))
g_comp=components(topsNet, mode = c("strong"))
g_comp
V(topsNet)$strongMembership=g_comp$membership
# seleccionando
nodes_Subset=V(topsNet)[V(topsNet)$stronMemebership==1]
# filtrndo red
topsNet_giant=induced_subgraph(g, nodes_Subset)
# seleccionando
nodes_Subset=V(topsNet)[V(topsNet)$stronMemebership==1]
# filtrndo red
topsNet_giant=induced_subgraph(topsNet, nodes_Subset)
# ahora:
topsNet_giant
# seleccionando
nodes_Subset=V(topsNet)[V(topsNet)$strongMemebership==1]
# filtrndo red
topsNet_giant=induced_subgraph(topsNet, nodes_Subset)
# ahora:
topsNet_giant
# seleccionando
nodes_Subset=V(topsNet)[V(topsNet)$strongMembership==1]
# filtrndo red
topsNet_giant=induced_subgraph(topsNet, nodes_Subset)
# ahora:
topsNet_giant
# seleccionando
nodes_Subset=V(topsNet)[V(topsNet)$strongMembership==1]
# filtrndo red
topsNet_giant=induced_subgraph(topsNet, nodes_Subset)
# ahora:
summary(topsNet_giant)
edge_density(topsNet_giant)
graph.density(topsNet_giant)
edge_density(topsNet_giant)
diameter(topsNet_giant)
farthest_vertices(topsNet_giant)
reciprocity(topsNet_giant)
transitivity(topsNet_giant)
assortativity_degree(topsNet_giant)
?assortativity
topsNet_giant
assortativity(topsNet_giant, values=popularity)
assortativity(topsNet_giant, values='popularity')
assortativity(topsNet_giant, values=V(topsNet_giant)$popularity)
assortativity(topsNet_giant, values=V(topsNet_giant)$popularity, directed = T)
assortativity_degree(topsNet_giant,directed = T)
assortativity_nominal(topsNet_giant, values=as.factor(V(topsNet_giant)$male), directed = T)
assortativity_nominal(topsNet_giant, directed = T)
assortativity_nominal(topsNet_giant, values=V(topsNet_giant)$male, directed = T)
assortativity(topsNet_giant, values=V(topsNet_giant)$male, directed = T)
# limpiar memoria
rm(list = ls())
# abrir red
adjacency=read.csv('data/seattleTop_adjMx.csv',row.names = 1) # la tabla tiene este nombre
matrix <- as.matrix(adjacency)
# abrir atributos
attributes=read.csv('data/seattleTop_attrTbl.csv') # la tabla tiene este nombre
library(igraph)
topsNet <- graph_from_adjacency_matrix(matrix, mode="directed",weighted = TRUE)
summary(topsNet)
V(topsNet)$male <- as.factor(attributes$male)
V(topsNet)$popularity <- attributes$followers
# ahora
summary(topsNet)
is_connected(topsNet,mode = c("strong"))
count_components(topsNet, mode = c("strong"))
g_comp=components(topsNet, mode = c("strong"))
g_comp
V(topsNet)$strongMembership=g_comp$membership
# seleccionando
nodes_Subset=V(topsNet)[V(topsNet)$strongMembership==1]
# filtrndo red
topsNet_giant=induced_subgraph(topsNet, nodes_Subset)
# ahora:
summary(topsNet_giant)
edge_density(topsNet_giant)
farthest_vertices(topsNet_giant)
reciprocity(topsNet_giant)
transitivity(topsNet_giant)
assortativity_degree(topsNet_giant,directed = T)
assortativity(topsNet_giant, values=V(topsNet_giant)$male, directed = T)
V(topsNet_giant)$male
topsNet_giant
assortativity(topsNet_giant, values=V(topsNet_giant)$male, directed = T)
assortativity.nominal(topsNet_giant, values=V(topsNet_giant)$male, directed = T)
assortativity.nominal(topsNet_giant, types=V(topsNet_giant)$male, directed = T)
assortativity_nominal(topsNet_giant, types=V(topsNet_giant)$male, directed = T)
length(cliques(topsNet_giant))
topsNet_giant_net <- intergraph::asNetwork(topsNet_giant)
intergraph::asNetwork(topsNet_giant)
topsNet_giant
# limpiar memoria
rm(list = ls())
# abrir red
adjacency=read.csv('data/seattleTop_adjMx.csv',row.names = 1) # la tabla tiene este nombre
matrix <- as.matrix(adjacency)
# abrir atributos
attributes=read.csv('data/seattleTop_attrTbl.csv') # la tabla tiene este nombre
library(igraph)
topsNet <- graph_from_adjacency_matrix(matrix, mode="directed",weighted = TRUE)
summary(topsNet)
V(topsNet)$male <- attributes$male
V(topsNet)$popularity <- attributes$followers
# ahora
summary(topsNet)
is_connected(topsNet,mode = c("strong"))
count_components(topsNet, mode = c("strong"))
g_comp=components(topsNet, mode = c("strong"))
g_comp
V(topsNet)$strongMembership=g_comp$membership
# seleccionando
nodes_Subset=V(topsNet)[V(topsNet)$strongMembership==1]
# filtrndo red
topsNet_giant=induced_subgraph(topsNet, nodes_Subset)
# ahora:
summary(topsNet_giant)
edge_density(topsNet_giant)
farthest_vertices(topsNet_giant)
reciprocity(topsNet_giant)
transitivity(topsNet_giant)
assortativity_degree(topsNet_giant,directed = T)
assortativity_nominal(topsNet_giant, types=V(topsNet_giant)$male, directed = T)
assortativity_nominal(topsNet_giant, values=V(topsNet_giant)$male, directed = T)
assortativity(topsNet_giant, values=V(topsNet_giant)$male, directed = T)
topsNet_giant_net <- intergraph::asNetwork(topsNet_giant)
topsNet_giant_net
census <- clique.census(topsNet_giant_net, mode="graph")
library(statnet)
census <- clique.census(topsNet_giant_net, mode="graph")
census
library(statnet)
census <- clique.census(topsNet_giant_net, mode="graph")
census$clique.count
?clique.census
library(statnet)
census <- clique.census(topsNet_giant_net, mode="digraph")
census$clique.count
topsNet_giant_net$cliques
census$cliques
library(statnet)
census <- clique.census(topsNet_giant_net, mode="graph")
census$clique.count
census$cliques
library(statnet)
census <- clique.census(topsNet_giant_net)
census$clique.count
length(cliques(topsNet_giant))
?coreness
edge_betweenness(topsNet_giant_net)
edge_betweenness(topsNet_giant)
edge_betweenness(topsNet_giant)[,1:10]
edge_betweenness(topsNet_giant)
edge_betweenness(topsNet_giant)[1:10]
sort(edge_betweenness(topsNet_giant))[1:10]
sort(edge_betweenness(topsNet_giant),decreasing = T)[1:10]
?edge_betweenness
sort(edge_betweenness(topsNet_giant,normalized = T),decreasing = T)[1:10]
sort(edge_betweenness(topsNet_giant),decreasing = T)[1:10]
E(topsNet_giant)
E(topsNet_giant)$edge_btn=edge_betweenness(topsNet_giant)
E(topsNet_giant)
topsNet_giant
E(topsNet_giant)$edge_btn
plot(topsNet_giant)
plot(topsNet_giant,edge.arrow.size=.2)
plot(topsNet_giant,edge.arrow.size=.2,vertex.label='')
plot(topsNet_giant,edge.arrow.size=.2,vertex.label='',edge.width=E(topsNet_giant)$edge_btn)
plot(topsNet_giant,edge.arrow.size=.2,vertex.label='',edge.width=E(topsNet_giant)$edge_btn/10)
plot(topsNet_giant,edge.arrow.size=.2,vertex.label='',edge.width=E(topsNet_giant)$edge_btn/5)
plot(topsNet_giant,edge.arrow.size=.2,vertex.label='',edge.width=E(topsNet_giant)$edge_btn/5)
l=layout_with_kk(topsNet_giant)
plot(topsNet_giant,layout=l,edge.arrow.size=.2,vertex.label='',edge.width=E(topsNet_giant)$edge_btn/5)
l=layout_with_fr(topsNet_giant)
plot(topsNet_giant,layout=l,edge.arrow.size=.2,vertex.label='',edge.width=E(topsNet_giant)$edge_btn/5)
l=layout_with_mds(topsNet_giant)
plot(topsNet_giant,layout=l,edge.arrow.size=.2,vertex.label='',edge.width=E(topsNet_giant)$edge_btn/5)
l=layout_with_mds(topsNet_giant)
plot(topsNet_giant,layout=l,edge.arrow.size=.2,vertex.label='',edge.width=1/E(topsNet_giant)$edge_btn)
l=layout_with_fr(topsNet_giant)
plot(topsNet_giant,layout=l,edge.arrow.size=.2,vertex.label='',edge.width=1/E(topsNet_giant)$edge_btn)
topsNet_giant_GN <- cluster_edge_betweenness(topsNet_giant, directed=T)
topsNet_giant_GN
topsNet_giant_GN <- cluster_edge_betweenness(topsNet_giant, directed=T)
topsNet_giant_GN
topsNet_giant_GN <- cluster_edge_betweenness(topsNet_giant, directed=T)
summary(topsNet_giant_GN)
topsNet_giant_GN <- cluster_edge_betweenness(topsNet_giant, directed=T)
topsNet_giant_GN
modularity(topsNet_giant_GN)
comunities(topsNet_giant_GN)
communities(topsNet_giant_GN)
reticulate::repl_python()
reticulate::repl_python()
